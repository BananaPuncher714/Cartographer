package io.github.bananapuncher714.cartographer.api.map;

import java.awt.Color;
import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.map.MapCursor;
import org.bukkit.map.MapCursor.Type;

import io.github.bananapuncher714.cartographer.api.map.addon.CursorSelector;
import io.github.bananapuncher714.cartographer.api.map.addon.MapCursorSelector;
import io.github.bananapuncher714.cartographer.api.map.addon.MapShader;
import io.github.bananapuncher714.cartographer.api.map.addon.Module;
import io.github.bananapuncher714.cartographer.api.map.addon.PixelShader;
import io.github.bananapuncher714.cartographer.api.map.addon.TextSelector;
import io.github.bananapuncher714.cartographer.api.objects.ZoomScale;

public interface Minimap {
	public boolean loadTransparentBlocks( FileConfiguration c, boolean clear );
	public boolean loadColors( FileConfiguration c, boolean clear );
	public void loadColor( Material m, byte data, Color c );
	public void loadColor( Material m, byte data, int r, int g, int b );
	public void loadModule( String id, Module module );
	public Map< String, Module > getModules();
	public void registerShader( MapShader shader );
	public UUID getUID();
	public File getDataFolder();
	public void registerCursorSelector( CursorSelector selector );
	public Set< CursorSelector > getCursorSelectors();
	public void registerMapCursorSelector( MapCursorSelector selector );
	public Set< MapCursorSelector > getMapCursorSelectors();
	public void registerTextSelector( TextSelector selector );
	public Set< TextSelector > getTextSelectors();
	public void registerPixelShader( PixelShader shader );
	public List< PixelShader > getPixelShaders();
	public Set< MapShader > getShaders();
	public byte[][] getOverlay();
	public void setOverlay( byte[][] overlay );
	public void setOverlay( File file );
	boolean showPlayer();
	void showPlayer( boolean showPlayer );
	boolean removeTransparentBlock( Material material );
	public boolean addTransparetMaterial( Material material );
	public Set< Material > getTransparentBlocks();
	public MapCursor.Type getDefPointer();
	public String getName();
	public List< String > getLore();
	public String getId();
	public Set< ZoomScale > getZoomList();
	public boolean isZoomScaleBlacklist();
	public boolean isZoomAllowed( ZoomScale scale );
	public MapCursor.Type setDefPointer( MapCursor.Type defPointer );
	public Type getCursorType();
	public double getCursorRadius();
	public boolean isCursorEnabled();
	public boolean isUpdateEnabled();
	public boolean isCenterChunk();
	public boolean isRenderOnChunkLoad();
	public boolean isSquareLoad();
	public boolean isForceOverlay();
	public boolean isStaticColors();
	public int getMapHeight();
	public int getWaterShading();
	public boolean isHighestIfNotHidden();
	public boolean isShowHidden();
	public Color getDefaultColor();
	public double getLoadRadius();
	public int getDiscoverRadius();
	public void updateLocation( Location loc );
	public void recolorChunk( Location location );
	public void recolorChunk( World world, int x, int z );
	public void refreshMap( boolean reload );
	public void relocateMap( int centerX, int centerY, int width, int height, World world );
	public World getWorld();
	public int getCenterX();
	public int getCenterY();
	public int getWidth();
	public int getHeight();
	public MapProvider getProvider();
	public boolean isInfinite();
}
